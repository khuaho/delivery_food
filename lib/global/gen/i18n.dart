import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale? _locale;
  static bool _shouldReload = false;
  static Locale? get locale => _locale;
  static set locale(Locale? newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback? onLocaleChanged;

  static I18n? of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);
  @override
  TextDirection get textDirection => TextDirection.ltr;
	/// "Delivery Food"
	String get appName => "Delivery Food";
	/// "Delivious"
	String get splash_Title => "Delivious";
	/// "Food Delivery"
	String get splash_Subtitle => "Food Delivery";
	/// ["English (US)", "Tiếng Việt"]
	List<String> get languageOption => ["English (US)", "Tiếng Việt"];
	/// ["Choose your favorite menu", "Pay with your card", "Sit and wait your food"]
	List<String> get onboarding_Title => ["Choose your favorite menu", "Pay with your card", "Sit and wait your food"];
	/// ["Various menu are available, including food, drinks, and various cakes", "Easy payment with various cards you have", "Just sit and relax, food will come and ready for you to eat"]
	List<String> get onboarding_Description => ["Various menu are available, including food, drinks, and various cakes", "Easy payment with various cards you have", "Just sit and relax, food will come and ready for you to eat"];
	/// "Skip"
	String get onboarding_Skip => "Skip";
	/// "Next"
	String get onboarding_Next => "Next";
	/// "Done"
	String get onboarding_Done => "Done";
}
class _I18n_en_US extends I18n {
  const _I18n_en_US();
}
class _I18n_vi_VN extends I18n {
  const _I18n_vi_VN();
  @override
  TextDirection get textDirection => TextDirection.ltr;
	/// "Delivery Food"
	@override
	String get appName => "Delivery Food";
	/// "Delivious"
	@override
	String get splash_Title => "Delivious";
	/// "Food Delivery"
	@override
	String get splash_Subtitle => "Food Delivery";
	/// ["English (US)", "Tiếng Việt"]
	@override
	List<String> get languageOption => ["English (US)", "Tiếng Việt"];
	/// ["Choose your favorite menu", "Pay with your card", "Sit and wait your food"]
	@override
	List<String> get onboarding_Title => ["Choose your favorite menu", "Pay with your card", "Sit and wait your food"];
	/// ["Various menu are available, including food, drinks, and various cakes", "Easy payment with various cards you have", "Just sit and relax, food will come and ready for you to eat"]
	@override
	List<String> get onboarding_Description => ["Various menu are available, including food, drinks, and various cakes", "Easy payment with various cards you have", "Just sit and relax, food will come and ready for you to eat"];
	/// "Skip"
	@override
	String get onboarding_Skip => "Skip";
	/// "Next"
	@override
	String get onboarding_Next => "Next";
	/// "Done"
	@override
	String get onboarding_Done => "Done";
}
class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
			Locale("vi", "VN")
    ];
  }

  LocaleResolutionCallback resolution({Locale? fallback}) {
    return (Locale? locale, Iterable<Locale> supported) {
      if (locale != null && isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale!.languageCode : "";
    if ("en_US" == lang) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
		}
		else if ("vi_VN" == lang) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_vi_VN());
		}
    else if ("en" == languageCode) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
		}
		else if ("vi" == languageCode) {
			return SynchronousFuture<WidgetsLocalizations>(const _I18n_vi_VN());
		}

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length ; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}
